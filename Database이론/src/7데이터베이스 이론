JOIN 절

제약조건? 


무결성 제약 조건의 개념과 종류
-데이터 무결성 제약 조건이란
테이블에 부적절한 자료가 입력되는 것을 방지하기 위해서
테이블을 생성할 때 각 컬럼에 대해서 정의하는 여러 가지 규칙을 말한다

제약조건(CONSTRAINT)이란
사용자가 원하는 조건의 데이터만 유지하기 위한, 즉 데이터의 무결성을
유지하기 위한 데이터베이스의 보편적인 방법으로 
테이블의 특정 컬럼에 설정하는 제약이다
테이블을 생성할 때 제약조건을 반드시 기술할 필요는 없지만
이후에 ALTER TABLE을 이용해서 추가, 수정하는 경우
데이터가 이미 입력된 경우라면 처리 과정이 쉽지 않으므로
초기 테이블 생성 시점부터 적합한 제약 조건에 대한 
충분한 검토가 있어야 한다

제약조건의 종류
-PRIMARY KEY(기본키)
테이블에 저장된 행 데이터를 고유하게 식별하기 위한 기본키를 정의한다
하나의 테이블에 하나의 기본키 제약만 정의할 수 있다
기본키 제약을 정의하면 DBMS는 자동으로 UNIQUE 인덱스를 생성하며,
기본키를 구성하는 컬럼에는 NULL을 입력할 수 없다

-UNIQE KEY(고유키)
테이블에 저장된 행 데이터를 고유하게 식별하기 위한 고유키를 정의한다
단, NULL은 고유키 제약의 대상이 아니므로, NULL 값을 가진 행이 여러 개가 
있더라도 고유키 제약 위반이 되지 않는다

-NOT NULL
NULL값의 입력을 금지한다. 디폴트 상태에서는 모든 컬럼에서 NULL을 허가하고 있지만,
이 제약을 지정함으로써 해당 컬럼은 입력 필수가 된다. NOT NULL을 
CHECK의 일부분으로 이해할 수도 있다

-CHECK
입력할 수 있는 값의 범위 등을 제한한다. CHECK 제약으로는 TRUE OR FALSE로
평가할 수 있는 논리식을 지정한다

FOREIGN KEY(외래키)
-관계형 데이터베이스에서 테이블 간의 관계를 정의하기 위해 기본키를 다른 테이블의
외래키로 복사하는 경우 외래키가 생성된다
외래키 지정시 참조 무결성 제약 옵션을 선택할 수 있다


cannot insert NULL into




unique constraint (EZ.SYS_C007138) violated



데이터 구분을 위한 primary key 제약 조건

유일 키 제약 조건을 지정한 컬럼은 중복된 데이터를 저장하지는 
못하지만 null값을 저장하는 것은 허용했다

하지만 primary key 제약 조건은
not null을 허용하지 않는다


식별자(identifier)

유일하게 무언가를 구분할 수 있는 것


DEPT테이블의 구조를 따라하되
DEPTNO를 기본키로 지정하시오
EXAM_DEPT숫자 형태로 생성하시오


참조 무결성 제약 조건 FOREIGN KEY
형식
DEPTNO NUMBER(2) 
	CONSTRAINT 외래키명 REFERENCES 참조할 테이블명(참조한 테이블의 기본키 컬럼명)


참조 무결성 제약조건은 부모 테이블의 기본키 컬럼의 데이터 이외의 
값을 자식 테이블에서 사용할 수 없게 한다
존재하지 않는 값 입력 불가

부모 테이블					자식 테이블
PRIMARY KEY COLUMN			PRIMARY KEY COLUMN	,,,		FOREIGN KEY COLUMN
														부모 기본키 참조
참조 무결성을 위한 부모와 자식 테이블의 관계



기본키 컬럼의 기본적인 특징
숫자 영어 형태

34234234
SDFDSFSD
COM_213

일련번호
모델명
직번



테이블 생성 이후 제약조건을 추가하는 방법
ALTER TABLE 테이블명
ADD CONSTRAINT 제약조건명 제약조건(컬럼명);



사원 테이블과 부서 테이블에 관계를 설정하시오
사원 부모    기본키
부서 자식    기본키 외래키

EXAM_테이블을 만드시오

기본키? 외래키?





CHECK와 DEFAULT의 제약조건


EMPNO  		,
ENAME  		,
SAL         ,
GENDER      ,
JOB         ,
DEPTNO      




부서 테이블에서
부서의 위치는 입력하지 않으면 기본적으로 서울로 
값이 입력되도록 하시오

부서 번호는 2자리 숫자만 입력가능하도록 제약조건을 지정하고
유니크 제약조건과 not null 제약조건을 설정하시오

제약조건을 확인할 수 있도록 데이터 입력도 보여주시오



기본키
한 테이블에 유일하다

unique + not null + index

유니크, not null
여러 컬럼에 가능하다








JOIN
두 개 이상의 테이블들을 연결 또는 결합하여 데이터를 출력하는
것을 JOIN이라고 한다
JOIN은 관계형 데이터베이스의 가장 큰 장점이면서 대표적인 핵심 기능이다
일반적인 경우 행들은 PK나 FK 값의 연관에 의해 JOIN이 성립된다
데이터베이스에서는 데이터가 중복되면 여러 가지 이상 현상이 발생하기 때문에
데이터가 중복되지 않도록 하기 위해서 2개 이상의 테이블로 나누어서 정보를 저장해
놓는다
그래서 원하는 정보를 얻어오려면 여러 개의 테이블을 조인해야 한다

조인의 종류
EQUI JOIN(동등 조인)
조인 대상이 되는 두 테이블에서 공통적으로 존재하는 컬럼의 값이
일치되는 행을 연결하여 결과를 얻는 방법이다

SELECT 컬럼명1, 컬럼명2,  ,,,
FROM 테이블1, 테이블2
WHERE 테이블1.컬럼명1 = 테이블2.컬럼명;


선수 테이블과 팀 테이블에서
선수 이름과 소속된 팀의 이름을 출력하시오

선수명	소속팀명




ORA-00918: column ambiguously defined
00918. 00000 -  "column ambiguously defined"
*Cause:    
*Action:
21행, 31열에서 오류 발생


조인을 할 때 먼저 고려해야 할 사항
각 테이블에 이름이 완전 같은 컬럼명이 있나 찾는다
각 테이블에서 기본키와 외래키를 찾아 본다




조인을 사용하여 뉴욕에서 근무하는 사원의 이름과 급여를 출력하시오
사원명이 빠른 순으로 조회
사원번호	사원명	급여		부서명 	 부서위치

ACCOUNTING 부서 소속 사원의 이름과 입사일을 조회하시오
입사일이 늦은 순으로 조회
입사일은 ??-??-?? 년월일로 나타내시오
ENAME		입사일

직급이 MANAGER인 사원의 이름, 부서명을 조회하는
SQL문을 작성하시오
부서번호가 빠른 순으로 조회하시오
EMPNO	ENAME 	JOB 	DEPTNO	DNAME


실바 선수의 이름, 백넘버, 소속되어 있는 팀명 및
연고지를 알고 싶다. 조회하는 SQL문을 작성하시오

선수명	백넘버	팀ID		팀명			연고지
실바		45		K07		드래곤즈		전남


포지션이 골키퍼인 선수들에 대한 데이터만을 
백넘버를 번호가 느린 순으로 출력하시오
팀ID		팀명 	선수명	백넘버	연고지	



NON-EQUI JOIN(비동등 조인)
조건의 특정 범위 내에 있는지를 조사하기 위한 연산자
=이외의 다른 연산자들을 사용한다
(>, <, <=, >=등)


사원의 급여등급을 표시하시오
SELECT ENAME, SAL, GRADE
FROM EMP E, SALGRADE S
WHERE SAL BETWEEN LOSAL AND HISAL;

오라클 연산자 없이 구하며
급여등급이 높은 값에서 낮은 값으로 출력되게 하시오



다중 테이블 조인?

급여등급에서 이제는 부서명도 출력되게 한다
급여가 2000에서 4000사이인 사원만 조회
부서명이 빠른 순으로


부서번호	부서명  	사원명 	급여		급여등급



SELF JOIN(셀프 조인)
자기 자신과 조인을 맺는 것




매니저가 KING인 사원들의 이름과 직급을 출력하시오
상사번호	상사명	사원번호	사원명 	사원직급		



SMITH와 동일한 근무지에서 근무하는 사원의 이름을 출력하시오
MyName		ENAME
SMITH		JONES
SMITH		FORD






