그룹함수, 집계함수





GROUP BY절
SQL문에서 FROM절과 WHERE절 뒤에 오며, 데이터들을 작은 그룹으로
분류하여 소그룹에 대한 항목별로 통계 정보를 추가로 얻을 때 사용된다

형식
SELECT 컬럼명 [ALIAS명]
FROM 테이블명
[WHERE 조건식]
GROUP BY 컬럼이나 표현식;

HAVING 절
그룹의 결과를 제한할 때 사용된다
팁: HAVING절에서 그룹 함수를 적용한 컬럼이 조건으로 올 가능성이
매우 높다

GROUP BY 절과 HAVING절은 다음과 같은 특성을 가진다
- GROUP BY 절을 통해 소그룹별 기준을 정한 후, SELECT절에 집계 함수를 사용한다
- 집계 함수의 통계 정보는 NULL 값을 가진 행을 제외하고 수행한다
- GROUP BY 절에서는 SELECT 절과는 달리 ALIAS 명을 사용할 수 없다
- 집계 함수는 WHERE 절에는 올 수 없다
(집계 함수를 사용할 수 있는 GROUP BY절 보다 WHERE절이 먼저 수행된다)
- WHERE 절은 전체 데이터를 GROUP BY로 나누기 전에 행들을 미리 제거시킨다
- HAVING절은 GROUP BY 절의 기준 항목이나 소그룹의 집계 함수를 이용한
조건을 표시할 수 있다
- GROUP BY절에 의한 소그룹별로 만들어진 집계 데이터 중, HAVING절에서 
제한 조건을 두어 조건을 만족하는 내용만 출력한다
- HAVING 절은 일반적으로 GROUP BY 절 뒤에 위치한다


각 sql문장이 결과가 맞다라는 증명할 수 있는 코드도 작성해보시오
k-리그 선수들의 포지션별 평균키를 구하는데
평균키가 180센티미터 이상인 정보만 표시하시오
평균은 소수점 1자리에서 반올림한다
포지션		평균키


삼성블루윙즈 팀의 포지션별 평균 몸무게를 구하는데
70~80에 속하는 정보만 표시하시오
평균은 소수점 1자리에서 반올림한다
팀ID		포지션		몸무게


선수들 중 삼성블루윙즈와 FC서울의 인원수는 얼마인가?
팀ID		인원수


포지션별 평균키만 출력하는데
최대키가 190 이상인 선수를 가지고 있는 포지션만 출력하시오
포지션			평균키


ORDER BY절
SQL문장으로 조회된 데이터들을 다양한 목적에 맞게 특정 컬럼을 기준으로
정렬하여 출력하는데 사용한다

ORDER 절에 컬럼명 대신에 SELECT절에서 사용한 ALIAS 명이나 
컬럼 순서를 나타내는 정수도 사용 가능하다
그리고 별도로 정렬 방식을 지정하지 않으면 기본적으로 오름차순이 적용되며,
SQL문장의 제일 마지막에 위치한다

SELECT 컬럼명
FROM 테이블명
WHERE 조건식
GROUP BY 컬럼이나 표현식
HAVING 그룹조건식
ORDER BY 컬럼이나 표현식 ASC 또는 DESC;

ASC(Ascending) : 조회한 데이터를 오름차순으로 정렬한다
DESC(Descending) : 조회한 데이터를 내림차순으로 정렬한다
		오름차순				내림차순
숫자		작은 값부터 정렬		큰 값부터 정렬
문자		사전 순서로 정렬		사전 반대 순서로 정렬
날짜		빠른 날짜 순서로 정렬	늦은 날짜 순서로 정렬
null	가장 마지막에 나온다		가장 먼저 나온다



사원들의 정보를 모두 출력하시오
단, 가장 최근에 입사한 사원순으로 출력하시오
전체 컬럼 출력



emp 테이블의 자료에서 입사일을 오름차순으로 정렬하여 출력하되
사원번호, 사원명, 직급, 입사일 컬럼을 출력하는 쿼리문을 작성하시오


사원번호를 기준으로 내림차순으로 정렬하여 사원번호와
사원명 컬럼을 표시하시오


부서번호가 빠른 사원부터 출력하되 같은 부서내의 사원을 
출력할 경우 최근에 입사한 사원부터 출력하되
사원번호, 입사일, 사원명, 급여순으로 출력하시오
(입사일은 ????-??-?? 형식으로 변환하시오)


선수 테이블에서 키가 큰 순서대로,
키가 같은 경우 백넘버가 작은 숫자에서 큰 순으로 sql문을 작성하는데
키가 null인 데이터는 제외한다

선수명	포지션	백넘버		키

선수 테이블에서 
선수들의 이름, 백넘버를 출력하는데 선수들의 백넘버를
내림차순, 백넘버가 같은 경우 포지션을 오름차순
포지션 까지 같은 경우 선수명이 큰 순으로 출력하시오
선수명		포지션		백넘버

사원테이블에서 부서별 중 가장 입사일이 늦은 날짜를 구하시오
부서번호        입사일

사원테이블에서 부서별로 입사일이 가장 늦은 날짜를 구하시오
단, 입사일이 빠른 순으로 정렬하시오
부서번호        입사일




smith의 부서명을 출력하시오


JOIN 절

제약조건? 


무결성 제약 조건의 개념과 종류
-데이터 무결성 제약 조건이란
테이블에 부적절한 자료가 입력되는 것을 방지하기 위해서
테이블을 생성할 때 각 컬럼에 대해서 정의하는 여러 가지 규칙을 말한다

제약조건(CONSTRAINT)이란
사용자가 원하는 조건의 데이터만 유지하기 위한, 즉 데이터의 무결성을
유지하기 위한 데이터베이스의 보편적인 방법으로 
테이블의 특정 컬럼에 설정하는 제약이다
테이블을 생성할 때 제약조건을 반드시 기술할 필요는 없지만
이후에 ALTER TABLE을 이용해서 추가, 수정하는 경우
데이터가 이미 입력된 경우라면 처리 과정이 쉽지 않으므로
초기 테이블 생성 시점부터 적합한 제약 조건에 대한 
충분한 검토가 있어야 한다

제약조건의 종류
-PRIMARY KEY(기본키)
테이블에 저장된 행 데이터를 고유하게 식별하기 위한 기본키를 정의한다
하나의 테이블에 하나의 기본키 제약만 정의할 수 있다
기본키 제약을 정의하면 DBMS는 자동으로 UNIQUE 인덱스를 생성하며,
기본키를 구성하는 컬럼에는 NULL을 입력할 수 없다

-UNIQE KEY(고유키)
테이블에 저장된 행 데이터를 고유하게 식별하기 위한 고유키를 정의한다
단, NULL은 고유키 제약의 대상이 아니므로, NULL 값을 가진 행이 여러 개가 
있더라도 고유키 제약 위반이 되지 않는다

-NOT NULL
NULL값의 입력을 금지한다. 디폴트 상태에서는 모든 컬럼에서 NULL을 허가하고 있지만,
이 제약을 지정함으로써 해당 컬럼은 입력 필수가 된다. NOT NULL을 
CHECK의 일부분으로 이해할 수도 있다

-CHECK
입력할 수 있는 값의 범위 등을 제한한다. CHECK 제약으로는 TRUE OR FALSE로
평가할 수 있는 논리식을 지정한다

FOREIGN KEY(외래키)
-관계형 데이터베이스에서 테이블 간의 관계를 정의하기 위해 기본키를 다른 테이블의
외래키로 복사하는 경우 외래키가 생성된다
외래키 지정시 참조 무결성 제약 옵션을 선택할 수 있다


 cannot insert NULL into




unique constraint (EZ.SYS_C007138) violated
























